// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MultipleToSerial_MultipleToSerial,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu15eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=466,HLS_SYN_LUT=340,HLS_VERSION=2022_1}" *)

module MultipleToSerial (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        output_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        ap_start,
        output_r_TVALID,
        output_r_TREADY,
        ap_done,
        ap_ready,
        ap_idle
);


input   ap_clk;
input   ap_rst_n;
input  [287:0] input_r_TDATA;
output  [31:0] output_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input   ap_start;
output   output_r_TVALID;
input   output_r_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;

 reg    ap_rst_n_inv;
wire   [31:0] tmp_elements_i_q0;
wire   [31:0] tmp_elements_t_q0;
wire    Block_entry4_proc2_U0_ap_start;
wire    Block_entry4_proc2_U0_ap_done;
wire    Block_entry4_proc2_U0_ap_continue;
wire    Block_entry4_proc2_U0_ap_idle;
wire    Block_entry4_proc2_U0_ap_ready;
wire    Block_entry4_proc2_U0_input_r_TREADY;
wire   [2:0] Block_entry4_proc2_U0_tmp_elements_address0;
wire    Block_entry4_proc2_U0_tmp_elements_ce0;
wire    Block_entry4_proc2_U0_tmp_elements_we0;
wire   [31:0] Block_entry4_proc2_U0_tmp_elements_d0;
wire   [2:0] Block_entry4_proc2_U0_tmp_elements_address1;
wire    Block_entry4_proc2_U0_tmp_elements_ce1;
wire    Block_entry4_proc2_U0_tmp_elements_we1;
wire   [31:0] Block_entry4_proc2_U0_tmp_elements_d1;
wire   [31:0] Block_entry4_proc2_U0_ap_return;
wire    ap_channel_done_tmp_elements_num_loc_channel;
wire    tmp_elements_num_loc_channel_full_n;
reg    ap_sync_reg_channel_write_tmp_elements_num_loc_channel;
wire    ap_sync_channel_write_tmp_elements_num_loc_channel;
wire    ap_channel_done_tmp_elements;
wire    Block_entry4_proc2_U0_tmp_elements_full_n;
reg    ap_sync_reg_channel_write_tmp_elements;
wire    ap_sync_channel_write_tmp_elements;
wire    Loop_VITIS_LOOP_16_1_proc_U0_ap_start;
wire    Loop_VITIS_LOOP_16_1_proc_U0_ap_done;
wire    Loop_VITIS_LOOP_16_1_proc_U0_ap_continue;
wire    Loop_VITIS_LOOP_16_1_proc_U0_ap_idle;
wire    Loop_VITIS_LOOP_16_1_proc_U0_ap_ready;
wire   [2:0] Loop_VITIS_LOOP_16_1_proc_U0_tmp_elements_address0;
wire    Loop_VITIS_LOOP_16_1_proc_U0_tmp_elements_ce0;
wire   [31:0] Loop_VITIS_LOOP_16_1_proc_U0_output_r_TDATA;
wire    Loop_VITIS_LOOP_16_1_proc_U0_output_r_TVALID;
wire    tmp_elements_i_full_n;
wire    tmp_elements_t_empty_n;
wire   [31:0] tmp_elements_num_loc_channel_dout;
wire   [1:0] tmp_elements_num_loc_channel_num_data_valid;
wire   [1:0] tmp_elements_num_loc_channel_fifo_cap;
wire    tmp_elements_num_loc_channel_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_tmp_elements_num_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_tmp_elements = 1'b0;
end

MultipleToSerial_tmp_elements_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_elements_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(Block_entry4_proc2_U0_tmp_elements_address0),
    .i_ce0(Block_entry4_proc2_U0_tmp_elements_ce0),
    .i_we0(Block_entry4_proc2_U0_tmp_elements_we0),
    .i_d0(Block_entry4_proc2_U0_tmp_elements_d0),
    .i_q0(tmp_elements_i_q0),
    .i_address1(Block_entry4_proc2_U0_tmp_elements_address1),
    .i_ce1(Block_entry4_proc2_U0_tmp_elements_ce1),
    .i_we1(Block_entry4_proc2_U0_tmp_elements_we1),
    .i_d1(Block_entry4_proc2_U0_tmp_elements_d1),
    .t_address0(Loop_VITIS_LOOP_16_1_proc_U0_tmp_elements_address0),
    .t_ce0(Loop_VITIS_LOOP_16_1_proc_U0_tmp_elements_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(tmp_elements_t_q0),
    .t_address1(3'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(tmp_elements_i_full_n),
    .i_write(ap_channel_done_tmp_elements),
    .t_empty_n(tmp_elements_t_empty_n),
    .t_read(Loop_VITIS_LOOP_16_1_proc_U0_ap_ready)
);

MultipleToSerial_Block_entry4_proc2 Block_entry4_proc2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_entry4_proc2_U0_ap_start),
    .ap_done(Block_entry4_proc2_U0_ap_done),
    .ap_continue(Block_entry4_proc2_U0_ap_continue),
    .ap_idle(Block_entry4_proc2_U0_ap_idle),
    .ap_ready(Block_entry4_proc2_U0_ap_ready),
    .input_r_TDATA(input_r_TDATA),
    .input_r_TVALID(input_r_TVALID),
    .input_r_TREADY(Block_entry4_proc2_U0_input_r_TREADY),
    .tmp_elements_address0(Block_entry4_proc2_U0_tmp_elements_address0),
    .tmp_elements_ce0(Block_entry4_proc2_U0_tmp_elements_ce0),
    .tmp_elements_we0(Block_entry4_proc2_U0_tmp_elements_we0),
    .tmp_elements_d0(Block_entry4_proc2_U0_tmp_elements_d0),
    .tmp_elements_address1(Block_entry4_proc2_U0_tmp_elements_address1),
    .tmp_elements_ce1(Block_entry4_proc2_U0_tmp_elements_ce1),
    .tmp_elements_we1(Block_entry4_proc2_U0_tmp_elements_we1),
    .tmp_elements_d1(Block_entry4_proc2_U0_tmp_elements_d1),
    .ap_return(Block_entry4_proc2_U0_ap_return)
);

MultipleToSerial_Loop_VITIS_LOOP_16_1_proc Loop_VITIS_LOOP_16_1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Loop_VITIS_LOOP_16_1_proc_U0_ap_start),
    .ap_done(Loop_VITIS_LOOP_16_1_proc_U0_ap_done),
    .ap_continue(Loop_VITIS_LOOP_16_1_proc_U0_ap_continue),
    .ap_idle(Loop_VITIS_LOOP_16_1_proc_U0_ap_idle),
    .ap_ready(Loop_VITIS_LOOP_16_1_proc_U0_ap_ready),
    .output_r_TREADY(output_r_TREADY),
    .p_read(tmp_elements_num_loc_channel_dout),
    .tmp_elements_address0(Loop_VITIS_LOOP_16_1_proc_U0_tmp_elements_address0),
    .tmp_elements_ce0(Loop_VITIS_LOOP_16_1_proc_U0_tmp_elements_ce0),
    .tmp_elements_q0(tmp_elements_t_q0),
    .output_r_TDATA(Loop_VITIS_LOOP_16_1_proc_U0_output_r_TDATA),
    .output_r_TVALID(Loop_VITIS_LOOP_16_1_proc_U0_output_r_TVALID)
);

MultipleToSerial_fifo_w32_d2_S tmp_elements_num_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry4_proc2_U0_ap_return),
    .if_full_n(tmp_elements_num_loc_channel_full_n),
    .if_write(ap_channel_done_tmp_elements_num_loc_channel),
    .if_dout(tmp_elements_num_loc_channel_dout),
    .if_num_data_valid(tmp_elements_num_loc_channel_num_data_valid),
    .if_fifo_cap(tmp_elements_num_loc_channel_fifo_cap),
    .if_empty_n(tmp_elements_num_loc_channel_empty_n),
    .if_read(Loop_VITIS_LOOP_16_1_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_tmp_elements <= 1'b0;
    end else begin
        if (((Block_entry4_proc2_U0_ap_done & Block_entry4_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_tmp_elements <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_tmp_elements <= ap_sync_channel_write_tmp_elements;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_tmp_elements_num_loc_channel <= 1'b0;
    end else begin
        if (((Block_entry4_proc2_U0_ap_done & Block_entry4_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_tmp_elements_num_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_tmp_elements_num_loc_channel <= ap_sync_channel_write_tmp_elements_num_loc_channel;
        end
    end
end

assign Block_entry4_proc2_U0_ap_continue = (ap_sync_channel_write_tmp_elements_num_loc_channel & ap_sync_channel_write_tmp_elements);

assign Block_entry4_proc2_U0_ap_start = ap_start;

assign Block_entry4_proc2_U0_tmp_elements_full_n = tmp_elements_i_full_n;

assign Loop_VITIS_LOOP_16_1_proc_U0_ap_continue = 1'b1;

assign Loop_VITIS_LOOP_16_1_proc_U0_ap_start = (tmp_elements_t_empty_n & tmp_elements_num_loc_channel_empty_n);

assign ap_channel_done_tmp_elements = ((ap_sync_reg_channel_write_tmp_elements ^ 1'b1) & Block_entry4_proc2_U0_ap_done);

assign ap_channel_done_tmp_elements_num_loc_channel = ((ap_sync_reg_channel_write_tmp_elements_num_loc_channel ^ 1'b1) & Block_entry4_proc2_U0_ap_done);

assign ap_done = Loop_VITIS_LOOP_16_1_proc_U0_ap_done;

assign ap_idle = ((tmp_elements_t_empty_n ^ 1'b1) & (tmp_elements_num_loc_channel_empty_n ^ 1'b1) & Loop_VITIS_LOOP_16_1_proc_U0_ap_idle & Block_entry4_proc2_U0_ap_idle);

assign ap_ready = Block_entry4_proc2_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_channel_write_tmp_elements = ((ap_channel_done_tmp_elements & Block_entry4_proc2_U0_tmp_elements_full_n) | ap_sync_reg_channel_write_tmp_elements);

assign ap_sync_channel_write_tmp_elements_num_loc_channel = ((tmp_elements_num_loc_channel_full_n & ap_channel_done_tmp_elements_num_loc_channel) | ap_sync_reg_channel_write_tmp_elements_num_loc_channel);

assign input_r_TREADY = Block_entry4_proc2_U0_input_r_TREADY;

assign output_r_TDATA = Loop_VITIS_LOOP_16_1_proc_U0_output_r_TDATA;

assign output_r_TVALID = Loop_VITIS_LOOP_16_1_proc_U0_output_r_TVALID;

endmodule //MultipleToSerial
